@page "/account/profile"
@implements IDisposable
@inject IDialogService DialogService
@inject HttpClient HttpClient
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider

<MudContainer MaxWidth="MaxWidth.Large">
    @if (!_isLoading)
    {
        if (_userEditingUsername)
        {
            <div style="width: 150px">
                <MudTextField T="string" Label="Username" HelperText="You can always change it" Value="@_userName" Immediate Validation="@(new Func<string, IEnumerable<string>>(arg => ClientValidationHelper.CheckUsername(arg)))"/>
                <MudButton Color="Color.Success">Save</MudButton>
                <MudButton Color="Color.Error" OnClick="@(() => { _userEditingUsername = false; ClearEditingModeSnackBar(); })">Cancel</MudButton>
            </div>
        }
        else
        {
            <div style="width: 150px">
                <MudDisabledActionedInput Title="Username" HelperText="You can always change it" Value="@_userName" EditAction="@(() => { _userEditingUsername = true; PopEditingModeSnackBar(); })"/>
            </div>
        }
        <MudTextField T="string" Style="color: black" Label="Email" Value="_userProfile.Email" DisableUnderLine Disabled/>
        <MudContainer Class="mt-2"/>
        if (_userEditingBirth)
        {
            <div style="width: 1250px; display: flex; align-items: flex-end">
                <MudDatePicker DateFormat="dd/MM/yyyy" Label="Birth" HelperText="Enter your Birth Date" Validation="@(new Func<DateTime?, string>(CheckAge))" Adornment="Adornment.End" Date="@(_storedTime ?? new(DateTime.Now.Year - 18, DateTime.Now.Month, DateTime.Now.Day))" DateChanged="UpdateBirth"/>
                <MudIconButton Style="margin-left: 10px" Icon="@Icons.Filled.Close" OnClick="@(() => { _userEditingBirth = false; ClearEditingModeSnackBar(); })"></MudIconButton>
                <MudContainer Class="mt-1"/>
            </div>
        }
        else
        {
            if (_userProfile.Birth != null)
            {
                <div style="width: 220px">
                    <MudDisabledActionedInput Title="Birth" Value="@BirthText()" EditAction="@(() => { _userEditingBirth = true; PopEditingModeSnackBar(); })"/>
                </div>
            }
            else
            {
                <MudButton Style="text-transform: none" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" OnClick="@(() => { _userEditingBirth = true; PopEditingModeSnackBar();})">
                    Set Birth
                </MudButton>
            }
        }


        <MudContainer Class="mt-2"/>
        <NewCountrySelector Country="@_userProfile.Country" CountryChanged="UpdateCountry" Editing="@_userEditingCountry" EditingChanged="@(s => { _userEditingCountry = s; if (s is true) PopEditingModeSnackBar(); else ClearEditingModeSnackBar(); })" EditingFromProfile="true"/>
    }
    else
    {
        <MudTextForInputSkeleton Title="Username" HasHelperText Width="150px" Height="32px"/>
        <MudTextForInputSkeleton Title="Email" Width="187px" Height="27.2px"/>
        <MudTextForInputSkeleton Title="Birth" Width="220px" Height="32px"/>
        <MudContainer Class="mt-2"/>
        <MudTextForInputSkeleton Title="Country" CountryInput/>
    }
</MudContainer>

@code {

    UserProfileDto _userProfile = new();
    string _userName;
    bool _isLoading;
    bool _userEditingUsername;
    bool _userEditingBirth;
    bool _userEditingCountry;

    Snackbar _editingModeSnackbar;

    DateTime? _storedTime;

    private void OpenDialog()
    {
        DialogService.Show<ChangeUsernameDialog>("Change Password Dialog");
    }

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

    // We have the username stored, let's use it instead of fetching from API, right?
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        _userName = authState.User?.Identity?.Name;

        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        var response = await HttpClient.GetAsync("profile/me");
        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            Snackbar.Add(apiError?.Message, Severity.Error);
            return;
        }
        _userProfile = await response.Content.ReadFromJsonAsync<UserProfileDto>();
        _storedTime = _userProfile?.Birth;

        await Task.Delay(750);
        _isLoading = false;
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> authStateTask)
    {
        var authState = await authStateTask;
        _userName = authState.User?.Identity?.Name;
        StateHasChanged();
    }

    private static string CheckAge(DateTime? arg)
    {
        return arg != null && (DateTime.Compare(arg.Value.AddYears(18), DateTime.Now) == 1 || arg.Value.Year < DateTime.Now.Year - 100) ? "You need to be major of age to play" : null;
    }

    private async Task UpdateBirth(DateTime? date)
    {
        if (date == null)
            return;

        _storedTime = date;

    // ui changes updated, and something more ... .

        if (CheckAge(date) == null)
        {
            var response = await HttpClient.PutAsJsonAsync("profile/birth", new UpdateProfileBirth(date));
            if (!response.IsSuccessStatusCode)
            {
                var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
                Snackbar.Add(apiError?.Message, Severity.Error);
                return;
            }

            _userProfile.Birth = date;
            _userEditingBirth = false;
            Snackbar.Add("Birth updated successfully", Severity.Success);
            ClearEditingModeSnackBar();
        }
    }

    private async Task UpdateCountry(string country)
    {
        if (string.IsNullOrEmpty(country))
            return;

        var response = await HttpClient.PutAsJsonAsync("profile/country", new UpdateProfileCountry(country));
        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            Snackbar.Add(apiError?.Message, Severity.Error);
            return;
        }

        _userProfile.Country = country;
        Snackbar.Add("Country updated successfully", Severity.Success);
    }

    private string BirthText()
    {
        if (_userProfile.Birth == null)
    // This should not happen anyways
            return string.Empty;

        DateTime date = _userProfile.Birth.Value;

        bool dayNeedsZero = date.Day.ToString().Length == 1;
        bool monthNeedsZero = date.Month.ToString().Length == 1;

        if (dayNeedsZero && monthNeedsZero)
            return $"0{date.Day}/0{date.Month}/{date.Year}";
        if (dayNeedsZero)
            return $"0{date.Day}/{date.Month}/{date.Year}";
        if (monthNeedsZero)
            return $"{date.Day}/0{date.Month}/{date.Year}";

        return $"{date.Day}/{date.Month}/{date.Year}";
    }

    /*
    private void ShowCloseEditingSnackBar()
    {
        Snackbar.Add("Exit edit mode", Severity.Normal, config =>
        {
            config.Onclick = sb =>
            {
                _userEditingBirth = false;
                _userEditingCountry = false;
                _userEditingUsername = false;

                return Task.CompletedTask;
            };
        });
    }
    */

    private void PopEditingModeSnackBar() =>
        _editingModeSnackbar ??= Snackbar.Add("You're in Editing Mode", Severity.Normal, config =>
        {
            config.Action = "Exit";
            config.ActionColor = Color.Primary;
            config.ShowCloseIcon = false;
            config.RequireInteraction = true;
            config.Onclick = _ =>
            {
                _userEditingUsername = _userEditingCountry = _userEditingBirth = false;
                _editingModeSnackbar = null;

                StateHasChanged();
                return Task.CompletedTask;
            };
        });

    private void ClearEditingModeSnackBar()
    {
        if (_userEditingUsername || _userEditingCountry || _userEditingBirth) return;

        Snackbar.Remove(_editingModeSnackbar);
        _editingModeSnackbar = null;
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }

}
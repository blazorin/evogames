@page "/login"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudCard>
        <MudCardContent>
            <MudForm @bind-IsValid="@isValid">
                <MudTextField T="string" Label="Email" Required="true" Immediate="true" RequiredError="Email is required" HelperText="Your current email"
                              Validation="@(new Func<string, IEnumerable<string>>(CheckEmail))" @ref="                                            Email"/>
                <MudTextField T="string" Label="Password" HelperText="Your current password" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordEye"
                              Required="true"
                              RequiredError="Password is required"
                              Immediate="true"
                              Validation="@(new Func<string, IEnumerable<string>>(CheckPassword))"
                              @ref="                                            Password"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <GoogleButtonPopUp ReturnUrl="@returnUrl"></GoogleButtonPopUp>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid || isLoging)" Class="ml-auto" OnClick="HandleLogin">Login</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {

    string returnUrl;
    bool isValid;
    bool isLoging;

    MudTextField<string> Email;
    MudTextField<string> Password;

    bool _isPasswordShown;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("");
            return;
        }

        var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryStringParams = QueryHelpers.ParseQuery(query);
        if (queryStringParams.TryGetValue("returnUrl", out var returnUrlParam))
        {
            returnUrl = returnUrlParam;
        }
    }

    private static IEnumerable<string> CheckEmail(string arg)
    {
        if (string.IsNullOrWhiteSpace(arg))
        {
            yield return "Email is required";
            yield break;
        }

        if (!CheckValidEmail.Validate(arg))
            yield return "Invalid email";
    }

    private static IEnumerable<string> CheckPassword(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password too short";
    }

    async Task HandleLogin()
    {
        isLoging = true;

        var credentials = new UserCredentials {Email = this.Email.Value, Password = this.Password.Value};

        var response = await HttpClient.PostAsJsonAsync("account/login", credentials);
        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            Snackbar.Add(apiError?.Message, Severity.Error);

            isLoging = false;
            return;
        }

        var userData = await response.Content.ReadFromJsonAsync<UserData>();
        if (userData == null)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).SetCurrentUserAsync(userData);

        NavigationManager.NavigateTo(returnUrl ?? "");
    }

    private void PasswordEye()
    {
        if (_isPasswordShown)
        {
            _isPasswordShown = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isPasswordShown = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

}
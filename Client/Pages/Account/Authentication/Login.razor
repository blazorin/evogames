@page "/login"

@using System.ComponentModel.DataAnnotations
@implements IDisposable
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<h3>Login</h3>

<EditForm EditContext="_editContext" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator/>

    <div class="form-group">
        <label for="email">Email:</label>
        <InputText class="form-control col-5" id="email" maxlength="@FieldLenghts.User.Mail" @bind-Value="_credentials.Email" autocomplete="email"/>
        <ValidationMessage For="() => _credentials.Email"/>
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <InputText class="form-control col-5" id="password" @bind-Value="_credentials.Password" DisplayName="Password" autocomplete="current-password"/>
        <ValidationMessage For="() => _credentials.Password"/>
    </div>

    <button type="submit" class="btn btn-primary" disabled="@(!isValid || isLoading)">Send</button>
</EditForm>

@code {

    [CascadingParameter]
    public NotificationManager NotificationManager { get; set; }

    string returnUrl;
    bool isValid;
    bool isLoading;

    private EditContext _editContext;
    private ValidationContext _validationContext;

    private readonly UserCredentials _credentials = new();

    protected override void OnInitialized()
    {
        _editContext = new EditContext(_credentials);
        _validationContext = new ValidationContext(_credentials);

        _editContext.OnFieldChanged += CheckFields;

        var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryStringParams = QueryHelpers.ParseQuery(query);
        if (queryStringParams.TryGetValue("returnUrl", out var returnUrlParam))
        {
            returnUrl = returnUrlParam;
        }
    }

    void CheckFields(object sender, FieldChangedEventArgs e)
    {
        isValid = Validator.TryValidateObject(this, _validationContext, new List<ValidationResult>());

        StateHasChanged();
    }

    async Task HandleLogin()
    {
        isLoading = true;

        var response = await HttpClient.PostAsJsonAsync("account/login", _credentials);
        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            await NotificationManager.AddToast(apiError?.StatusDescription, apiError?.Message);

            isLoading = false;
            isValid = false;
            return;
        }

        var userData = await response.Content.ReadFromJsonAsync<UserData>();
        if (userData == null)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }

        await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).SetCurrentUserAsync(userData);

        NavigationManager.NavigateTo(returnUrl ?? "");
    }

    public void Dispose()
    {
        _editContext.OnFieldChanged -= CheckFields;
    }

}
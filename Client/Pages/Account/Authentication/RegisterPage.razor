@page "/register"

@using System.Text.RegularExpressions
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudCard>
        <MudCardContent>
            <MudForm @bind-IsValid="@isValid">
                <MudTextField T="string" Label="Email" Required="true" Immediate="true" RequiredError="Email is required"
                              Validation="@(new Func<string, IEnumerable<string>>(CheckEmail))" OnKeyUp="OnEmailChanged" @ref="Email"/>
                <MudTextField T="string" Label="Username" HelperText="Letters and numbers allowed" Required="true" Immediate="true"
                              RequiredError="Username is required" Validation="@(new Func<string, IEnumerable<string>>(CheckUsername))" @ref="Username" OnKeyUp="OnUsernameChanged"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordEye"
                              Required="true"
                              RequiredError="Password is required"
                              Immediate="true"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"
                              @ref="Password"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordEye"
                              Required="true"
                              RequiredError="Repeat your password"
                              Immediate="true"
                              Validation="@(new Func<string, string>(PasswordMatch))"
                              @ref="PasswordRepeat"/>

                <MudItem xs="12" sm="6" md="4">
                    @*This should use the current UI Culture, by default *@
                    <MudDatePicker DateFormat="dd/MM/yyyy" Label="Birth" @bind-Date="@Birth" HelperText="Enter your Birth Date" Validation="@(new Func<DateTime?, string>(CheckAge))"></MudDatePicker>
                </MudItem>
                <NewCountrySelector @bind-Country="@Country"></NewCountrySelector>
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                             Label="I agree with EVO.Games ToS" Color="Color.Tertiary"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <GoogleButtonPopUp ReturnUrl="@returnUrl" CalledFromRegister></GoogleButtonPopUp>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid || isCreating)" Class="ml-auto" OnClick="CreateAccount">Register</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {

    string returnUrl;
    bool emailExists;
    bool usernameExists;
    bool isValid;
    bool isCreating;

    MudTextField<string> Email;
    MudTextField<string> Username;
    string Country;
    MudTextField<string> Password;
    MudTextField<string> PasswordRepeat;
    DateTime? Birth = new(DateTime.Now.Year - 18, DateTime.Now.Month, DateTime.Now.Day);

    bool _isPasswordShown;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("");
            return;
        }

        var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryStringParams = QueryHelpers.ParseQuery(query);
        if (queryStringParams.TryGetValue("returnUrl", out var returnUrlParam))
        {
            returnUrl = returnUrlParam;
        }
    }

    private IEnumerable<string> CheckEmail(string arg)
    {
    //EmailAddressAttribute attribute = new();

        if (string.IsNullOrWhiteSpace(arg))
        {
            yield return "Email is required";
            yield break;
        }

        if (!CheckValidEmail.Validate(arg))
            yield return "Invalid email";

        if (emailExists)
            yield return "This email already exists";
    }

    private IEnumerable<string> CheckUsername(string arg)
    {
        if (string.IsNullOrWhiteSpace(arg))
        {
            yield return "Username is required";
            yield break;
        }

        if (BlackList.Names.Any(name => name == arg))
            yield return $"Username {arg} is not allowed";

        if (usernameExists)
            yield return "This username already exists";

        if (arg.Length < 4)
            yield return "Username too short";


        if (arg.Length > 15)
            yield return "Username too large";

        if (!arg.All(char.IsLetterOrDigit))
            yield return "Username does not accept symbols";
    }

    private static string CheckAge(DateTime? arg)
    {
        return arg != null && (DateTime.Compare(arg.Value.AddYears(18), DateTime.Now) == 1 || arg.Value.Year < DateTime.Now.Year - 100) ? "You need to be major of age to play" : null;
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";

        if (!string.IsNullOrEmpty(PasswordRepeat.Value))
            PasswordRepeat.Validate();
    }


    private string PasswordMatch(string arg)
    {
        return !string.IsNullOrEmpty(Password.Value) && Password.Value != arg ? "Passwords don't match" : null;
    }

    async Task CreateAccount()
    {
        if (emailExists || usernameExists)
            return;

        isCreating = true;

        var newUserDto = new NewUserDto
        {
            Email = this.Email.Value,
            Name = this.Username.Value,
            Country = this.Country,
            Birth = this.Birth.Value,
            Password = this.Password.Value
        };

        var response = await HttpClient.PostAsJsonAsync("account/register", newUserDto);

        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            Snackbar.Add(apiError?.Message, Severity.Error);

            isCreating = false;
            return;
        }

        var userData = await response.Content.ReadFromJsonAsync<UserData>();
        if (userData == null)
        {
            NavigationManager.NavigateTo("register", true);
            return;
        }

        await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).SetCurrentUserAsync(userData);

        NavigationManager.NavigateTo(returnUrl ?? "");
    }

    private async Task OnEmailChanged(KeyboardEventArgs args)
    {
        var value = Email.Value;
        if (!CheckValidEmail.Validate(value))
            return;


        var response = await HttpClient.GetAsync($"account/email/{value}");

        var result = await response.Content.ReadFromJsonAsync<bool>();

        emailExists = result;

        await Email.Validate();
    }

    private async Task OnUsernameChanged(KeyboardEventArgs args)
    {
        var value = Username.Value;
        if (value.Length < 4 || value.Length > 15)
            return;

        var response = await HttpClient.GetAsync($"account/username/{value}");

        var result = await response.Content.ReadFromJsonAsync<bool>();

        usernameExists = result;

        await Username.Validate();
    }

    private void PasswordEye()
    {
        if (_isPasswordShown)
        {
            _isPasswordShown = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isPasswordShown = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

}
@page "/register"

@using System.Text.RegularExpressions
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-8">
    <MudCard>
        <MudCardContent>
            <MudForm @bind-IsValid="@isValid">
                <MudTextField T="string" Label="Email" Required="true" Immediate="true" RequiredError="Email is required"
                              Validation="@(new Func<string, IEnumerable<string>>(arg => ClientValidationHelper.CheckEmail(arg, emailExists)))" OnKeyUp="OnEmailChanged" @ref="Email"/>
                <MudTextField T="string" Label="Username" HelperText="Letters and numbers allowed" Required="true" Immediate="true"
                              RequiredError="Username is required" Validation="@(new Func<string, IEnumerable<string>>(arg => ClientValidationHelper.CheckUsername(arg, usernameExists)))" @ref="Username" OnKeyUp="OnUsernameChanged"/>
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordEye"
                              Required="true"
                              RequiredError="Password is required"
                              Immediate="true"
                              Validation="@(new Func<string, IEnumerable<string>>(arg => ClientValidationHelper.PasswordStrength(arg, PasswordRepeat)))"
                              @ref="Password"/>
                <MudTextField T="string"
                              Label="Password" HelperText="Repeat the password" InputType="@_passwordInput" Adornment="Adornment.End" AdornmentIcon="@_passwordInputIcon" OnAdornmentClick="PasswordEye"
                              Required="true"
                              RequiredError="Repeat your password"
                              Immediate="true"
                              Validation="@(new Func<string, string>(arg => ClientValidationHelper.PasswordMatch(arg, Password)))"
                              @ref="PasswordRepeat"/>

                <MudItem xs="12" sm="6" md="4">
                    @*This should use the current UI Culture, by default *@
                    <MudDatePicker DateFormat="dd/MM/yyyy" Label="Birth" @bind-Date="@Birth" HelperText="Enter your Birth Date" Validation="@(new Func<DateTime?, string>(arg => ClientValidationHelper.CheckAge(arg)))"></MudDatePicker>
                </MudItem>
                <NewCountrySelector @bind-Country="@Country"></NewCountrySelector>
                <MudCheckBox T="bool" Required="true" RequiredError="You must agree" Class="ml-n2"
                             Label="I agree with EVO.Games ToS" Color="Color.Tertiary"/>
            </MudForm>
        </MudCardContent>
        <MudCardActions>
            <GoogleButtonPopUp ReturnUrl="@returnUrl"></GoogleButtonPopUp>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!isValid || isCreating)" Class="ml-auto" OnClick="CreateAccount">Register</MudButton>
        </MudCardActions>
    </MudCard>
</MudContainer>

@code {

    string returnUrl;
    bool emailExists;
    bool usernameExists;
    bool isValid;
    bool isCreating;

    MudTextField<string> Email;
    MudTextField<string> Username;
    string Country;
    MudTextField<string> Password;
    MudTextField<string> PasswordRepeat;
    DateTime? Birth = new(DateTime.Now.Year - 18, DateTime.Now.Month, DateTime.Now.Day);

    bool _isPasswordShown;
    InputType _passwordInput = InputType.Password;
    string _passwordInputIcon = Icons.Material.Filled.VisibilityOff;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity != null && authState.User.Identity.IsAuthenticated)
        {
            NavigationManager.NavigateTo("");
            return;
        }

        var query = NavigationManager.ToAbsoluteUri(NavigationManager.Uri).Query;
        var queryStringParams = QueryHelpers.ParseQuery(query);
        if (queryStringParams.TryGetValue("returnUrl", out var returnUrlParam))
        {
            returnUrl = returnUrlParam;
        }
    }

    async Task CreateAccount()
    {
        if (emailExists || usernameExists)
            return;

        isCreating = true;

        var newUserDto = new NewUserDto
        {
            Email = this.Email.Value,
            Name = this.Username.Value,
            Country = this.Country,
            Birth = this.Birth.Value,
            Password = this.Password.Value
        };

        var response = await HttpClient.PostAsJsonAsync("account/register", newUserDto);

        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            Snackbar.Add(apiError?.Message, Severity.Error);

            isCreating = false;
            return;
        }

        var userData = await response.Content.ReadFromJsonAsync<UserData>();
        if (userData == null)
        {
            NavigationManager.NavigateTo("register", true);
            return;
        }

        await ((CustomAuthenticationStateProvider)AuthenticationStateProvider).SetCurrentUserAsync(userData);

        NavigationManager.NavigateTo(returnUrl ?? "");
    }

    private async Task OnEmailChanged(KeyboardEventArgs args)
    {
        var value = Email.Value;
        if (!CheckValidEmail.Validate(value))
            return;


        var response = await HttpClient.GetAsync($"account/email/{value}");

        var result = await response.Content.ReadFromJsonAsync<bool>();

        emailExists = result;

        await Email.Validate();
    }

    private async Task OnUsernameChanged(KeyboardEventArgs _)
    {
        var value = Username.Value;
        if (value.Length is < 4 or > 15 || BlackList.Names.Any(name => name == value))
            return;

        var response = await HttpClient.GetAsync($"account/username/{value}");

        var result = await response.Content.ReadFromJsonAsync<bool>();

        usernameExists = result;

        await Username.Validate();
    }

    private void PasswordEye()
    {
        if (_isPasswordShown)
        {
            _isPasswordShown = false;
            _passwordInputIcon = Icons.Material.Filled.VisibilityOff;
            _passwordInput = InputType.Password;
        }
        else
        {
            _isPasswordShown = true;
            _passwordInputIcon = Icons.Material.Filled.Visibility;
            _passwordInput = InputType.Text;
        }
    }

}
<MudItem xs="12" sm="6" md="4">

    @if (!EditingFromProfile)
    {
        <MudSelect T="string" Value="Country" ValueChanged="@(async (country) => await CountryChanged.InvokeAsync(country))" Label="Country" Variant="Variant.Outlined" OffsetY="true" Required="true" RequiredError="Country is required">
            <NewCountrySelectorItems/>
        </MudSelect>
    }
    else
    {
        if (Editing)
        {
            <div style="width: 250px; display: flex; align-items: flex-end">
                <MudSelect T="string" Value="Country" ValueChanged="@(async (country) => { await CountryChanged.InvokeAsync(country); await EditingChanged.InvokeAsync(false); })" Label="Country" Variant="Variant.Outlined" OffsetY="true" Required="true" RequiredError="Country is required">
                    <NewCountrySelectorItems/>
                </MudSelect>
                <MudIconButton Style="margin-left: 10px" Icon="@(Icons.Filled.Close)" OnClick="@(async () => await EditingChanged.InvokeAsync(false))"/>
            </div>
        }
        else
        {
            if (!string.IsNullOrEmpty(Country))
            {
                <div style="width: 250px; display: flex; align-items: flex-end">
                    <MudSelect T="string" Value="Country" Label="Country" Variant="Variant.Outlined" OffsetY="true" Disabled="true">
                        <NewCountrySelectorItems/>
                    </MudSelect>
                    <MudIconButton Style="margin-left: 10px" Icon="@(Icons.Material.Filled.Edit)" OnClick="@(async () => await EditingChanged.InvokeAsync(true))"/>
    
                </div>
            }
            else
            {
                <MudButton Style="text-transform: none" Color="Color.Primary" Variant="Variant.Filled" Size="Size.Medium" OnClick="@(async () => await EditingChanged.InvokeAsync(true))">
                    Set Country
                </MudButton>
            }
        }
    }
</MudItem>

@code {

    [Parameter]
    public string Country { get; set; }

    [Parameter]
    public bool EditingFromProfile { get; set; }

    [Parameter]
    public bool Editing { get; set; }

    [Parameter]
    public EventCallback<bool> EditingChanged { get; set; }

    [Parameter]
    public EventCallback<string> CountryChanged { get; set; }

}
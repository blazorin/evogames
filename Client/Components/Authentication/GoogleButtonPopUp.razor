@inject IJSRuntime JsRuntime
@inject HttpClient HttpClient
@using global::Shared.Oauth
@using Client.Extensions.Authentication
@implements IAsyncDisposable
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager


<div class="g-signin2" data-onsuccess="onSignIn"></div>


@code {

    [Parameter]
    public string ReturnUrl { get; set; }

    DotNetObjectReference<GoogleButtonPopUp> _reference;

    bool _canSendReference;

    protected override async Task OnInitializedAsync()
    {
        await JsRuntime.InvokeVoidAsync("loadScript", "./js/googleAuth.js");

        await JsRuntime.InvokeVoidAsync("reloadJsDefer", "https://apis.google.com/js/platform.js", true);

        _canSendReference = true;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await CreateAndSendReference();
    }

    async Task CreateAndSendReference()
    {
    // We create the reference to the actual component..
        _reference = DotNetObjectReference.Create(this);

    // and then we send it to EvoGoogleState when both scripts are loaded
        while (_canSendReference != true)
            await Task.Delay(1);

        await JsRuntime.InvokeVoidAsync("evoGoogleState.initialize", _reference);
    }

    /// Called by evoGoogleState.callEvoServer
    [JSInvokable]
    public async Task ReceiveGoogleIdToken(string token)
    {
        if (string.IsNullOrWhiteSpace(token))
            return;

        var response = await HttpClient.PostAsJsonAsync("account/oauth/google", new GoogleLoginRequest() {IdToken = token});
        if (!response.IsSuccessStatusCode)
        {
            var apiError = await response.Content.ReadFromJsonAsync<ApiError>();
            Snackbar.Add(apiError?.Message, Severity.Error);
            return;
        }

        var userData = await response.Content.ReadFromJsonAsync<UserData>();

        if (userData == null)
        {
            NavigationManager.NavigateTo(NavigationManager.ToBaseRelativePath(NavigationManager.Uri), true);
            return;
        }

        await ((CustomAuthenticationStateProvider) AuthenticationStateProvider).SetCurrentUserAsync(userData);

        NavigationManager.NavigateTo(ReturnUrl ?? "");
    }

    public async ValueTask DisposeAsync()
    {
        _reference?.Dispose();
        await JsRuntime.InvokeVoidAsync("reloadJsDefer", "https://apis.google.com/js/platform.js", false);
    }

}